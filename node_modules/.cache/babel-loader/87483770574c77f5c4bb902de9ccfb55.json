{"ast":null,"code":"/**\n * @author zz85 / https://github.com/zz85\n *\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nimport { BackSide, BoxBufferGeometry, Mesh, ShaderMaterial, UniformsUtils, Vector3 } from \"../../../build/three.module.js\";\nvar Sky = function Sky() {\n  var shader = Sky.SkyShader;\n  var material = new ShaderMaterial({\n    fragmentShader: shader.fragmentShader,\n    vertexShader: shader.vertexShader,\n    uniforms: UniformsUtils.clone(shader.uniforms),\n    side: BackSide,\n    depthWrite: false\n  });\n  Mesh.call(this, new BoxBufferGeometry(1, 1, 1), material);\n};\nSky.prototype = Object.create(Mesh.prototype);\nSky.SkyShader = {\n  uniforms: {\n    \"luminance\": {\n      value: 1\n    },\n    \"turbidity\": {\n      value: 2\n    },\n    \"rayleigh\": {\n      value: 1\n    },\n    \"mieCoefficient\": {\n      value: 0.005\n    },\n    \"mieDirectionalG\": {\n      value: 0.8\n    },\n    \"sunPosition\": {\n      value: new Vector3()\n    },\n    \"up\": {\n      value: new Vector3(0, 1, 0)\n    }\n  },\n  vertexShader: ['uniform vec3 sunPosition;', 'uniform float rayleigh;', 'uniform float turbidity;', 'uniform float mieCoefficient;', 'uniform vec3 up;', 'varying vec3 vWorldPosition;', 'varying vec3 vSunDirection;', 'varying float vSunfade;', 'varying vec3 vBetaR;', 'varying vec3 vBetaM;', 'varying float vSunE;',\n  // constants for atmospheric scattering\n  'const float e = 2.71828182845904523536028747135266249775724709369995957;', 'const float pi = 3.141592653589793238462643383279502884197169;',\n  // wavelength of used primaries, according to preetham\n  'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );',\n  // this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n  // (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n  'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );',\n  // mie stuff\n  // K coefficient for the primaries\n  'const float v = 4.0;', 'const vec3 K = vec3( 0.686, 0.678, 0.666 );',\n  // MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n  'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );',\n  // earth shadow hack\n  // cutoffAngle = pi / 1.95;\n  'const float cutoffAngle = 1.6110731556870734;', 'const float steepness = 1.5;', 'const float EE = 1000.0;', 'float sunIntensity( float zenithAngleCos ) {', '\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );', '\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );', '}', 'vec3 totalMie( float T ) {', '\tfloat c = ( 0.2 * T ) * 10E-18;', '\treturn 0.434 * c * MieConst;', '}', 'void main() {', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tvWorldPosition = worldPosition.xyz;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tgl_Position.z = gl_Position.w;',\n  // set z to camera.far\n\n  '\tvSunDirection = normalize( sunPosition );', '\tvSunE = sunIntensity( dot( vSunDirection, up ) );', '\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );', '\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );',\n  // extinction (absorbtion + out scattering)\n  // rayleigh coefficients\n  '\tvBetaR = totalRayleigh * rayleighCoefficient;',\n  // mie coefficients\n  '\tvBetaM = totalMie( turbidity ) * mieCoefficient;', '}'].join('\\n'),\n  fragmentShader: ['varying vec3 vWorldPosition;', 'varying vec3 vSunDirection;', 'varying float vSunfade;', 'varying vec3 vBetaR;', 'varying vec3 vBetaM;', 'varying float vSunE;', 'uniform float luminance;', 'uniform float mieDirectionalG;', 'uniform vec3 up;', 'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );',\n  // constants for atmospheric scattering\n  'const float pi = 3.141592653589793238462643383279502884197169;', 'const float n = 1.0003;',\n  // refractive index of air\n  'const float N = 2.545E25;',\n  // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n\n  // optical length at zenith for molecules\n  'const float rayleighZenithLength = 8.4E3;', 'const float mieZenithLength = 1.25E3;',\n  // 66 arc seconds -> degrees, and the cosine of that\n  'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\n  // 3.0 / ( 16.0 * pi )\n  'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;',\n  // 1.0 / ( 4.0 * pi )\n  'const float ONE_OVER_FOURPI = 0.07957747154594767;', 'float rayleighPhase( float cosTheta ) {', '\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );', '}', 'float hgPhase( float cosTheta, float g ) {', '\tfloat g2 = pow( g, 2.0 );', '\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );', '\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );', '}',\n  // Filmic ToneMapping http://filmicgames.com/archives/75\n  'const float A = 0.15;', 'const float B = 0.50;', 'const float C = 0.10;', 'const float D = 0.20;', 'const float E = 0.02;', 'const float F = 0.30;', 'const float whiteScale = 1.0748724675633854;',\n  // 1.0 / Uncharted2Tonemap(1000.0)\n\n  'vec3 Uncharted2Tonemap( vec3 x ) {', '\treturn ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;', '}', 'void main() {', '\tvec3 direction = normalize( vWorldPosition - cameraPos );',\n  // optical length\n  // cutoff angle at 90 to avoid singularity in next formula.\n  '\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );', '\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );', '\tfloat sR = rayleighZenithLength * inverse;', '\tfloat sM = mieZenithLength * inverse;',\n  // combined extinction factor\n  '\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );',\n  // in scattering\n  '\tfloat cosTheta = dot( direction, vSunDirection );', '\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );', '\tvec3 betaRTheta = vBetaR * rPhase;', '\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );', '\tvec3 betaMTheta = vBetaM * mPhase;', '\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );', '\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );',\n  // nightsky\n  '\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]', '\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]', '\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );', '\tvec3 L0 = vec3( 0.1 ) * Fex;',\n  // composition + solar disc\n  '\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );', '\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;', '\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );', '\tvec3 curr = Uncharted2Tonemap( ( log2( 2.0 / pow( luminance, 4.0 ) ) ) * texColor );', '\tvec3 color = curr * whiteScale;', '\tvec3 retColor = pow( color, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );', '\tgl_FragColor = vec4( retColor, 1.0 );', '}'].join('\\n')\n};\nexport { Sky };","map":{"version":3,"names":["BackSide","BoxBufferGeometry","Mesh","ShaderMaterial","UniformsUtils","Vector3","Sky","shader","SkyShader","material","fragmentShader","vertexShader","uniforms","clone","side","depthWrite","call","prototype","Object","create","value","join"],"sources":["/Users/mac/Desktop/react-3js-word-sphere/node_modules/three/examples/jsm/objects/Sky.js"],"sourcesContent":["/**\n * @author zz85 / https://github.com/zz85\n *\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nimport {\n\tBackSide,\n\tBoxBufferGeometry,\n\tMesh,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector3\n} from \"../../../build/three.module.js\";\n\nvar Sky = function () {\n\n\tvar shader = Sky.SkyShader;\n\n\tvar material = new ShaderMaterial( {\n\t\tfragmentShader: shader.fragmentShader,\n\t\tvertexShader: shader.vertexShader,\n\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\tside: BackSide,\n\t\tdepthWrite: false\n\t} );\n\n\tMesh.call( this, new BoxBufferGeometry( 1, 1, 1 ), material );\n\n};\n\nSky.prototype = Object.create( Mesh.prototype );\n\nSky.SkyShader = {\n\n\tuniforms: {\n\t\t\"luminance\": { value: 1 },\n\t\t\"turbidity\": { value: 2 },\n\t\t\"rayleigh\": { value: 1 },\n\t\t\"mieCoefficient\": { value: 0.005 },\n\t\t\"mieDirectionalG\": { value: 0.8 },\n\t\t\"sunPosition\": { value: new Vector3() },\n\t\t\"up\": { value: new Vector3( 0, 1, 0 ) }\n\t},\n\n\tvertexShader: [\n\t\t'uniform vec3 sunPosition;',\n\t\t'uniform float rayleigh;',\n\t\t'uniform float turbidity;',\n\t\t'uniform float mieCoefficient;',\n\t\t'uniform vec3 up;',\n\n\t\t'varying vec3 vWorldPosition;',\n\t\t'varying vec3 vSunDirection;',\n\t\t'varying float vSunfade;',\n\t\t'varying vec3 vBetaR;',\n\t\t'varying vec3 vBetaM;',\n\t\t'varying float vSunE;',\n\n\t\t// constants for atmospheric scattering\n\t\t'const float e = 2.71828182845904523536028747135266249775724709369995957;',\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;',\n\n\t\t// wavelength of used primaries, according to preetham\n\t\t'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );',\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\t'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );',\n\n\t\t// mie stuff\n\t\t// K coefficient for the primaries\n\t\t'const float v = 4.0;',\n\t\t'const vec3 K = vec3( 0.686, 0.678, 0.666 );',\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\t'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );',\n\n\t\t// earth shadow hack\n\t\t// cutoffAngle = pi / 1.95;\n\t\t'const float cutoffAngle = 1.6110731556870734;',\n\t\t'const float steepness = 1.5;',\n\t\t'const float EE = 1000.0;',\n\n\t\t'float sunIntensity( float zenithAngleCos ) {',\n\t\t'\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );',\n\t\t'\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );',\n\t\t'}',\n\n\t\t'vec3 totalMie( float T ) {',\n\t\t'\tfloat c = ( 0.2 * T ) * 10E-18;',\n\t\t'\treturn 0.434 * c * MieConst;',\n\t\t'}',\n\n\t\t'void main() {',\n\n\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n\t\t'\tvWorldPosition = worldPosition.xyz;',\n\n\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\t\t'\tgl_Position.z = gl_Position.w;', // set z to camera.far\n\n\t\t'\tvSunDirection = normalize( sunPosition );',\n\n\t\t'\tvSunE = sunIntensity( dot( vSunDirection, up ) );',\n\n\t\t'\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );',\n\n\t\t'\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );',\n\n\t\t// extinction (absorbtion + out scattering)\n\t\t// rayleigh coefficients\n\t\t'\tvBetaR = totalRayleigh * rayleighCoefficient;',\n\n\t\t// mie coefficients\n\t\t'\tvBetaM = totalMie( turbidity ) * mieCoefficient;',\n\n\t\t'}'\n\t].join( '\\n' ),\n\n\tfragmentShader: [\n\t\t'varying vec3 vWorldPosition;',\n\t\t'varying vec3 vSunDirection;',\n\t\t'varying float vSunfade;',\n\t\t'varying vec3 vBetaR;',\n\t\t'varying vec3 vBetaM;',\n\t\t'varying float vSunE;',\n\n\t\t'uniform float luminance;',\n\t\t'uniform float mieDirectionalG;',\n\t\t'uniform vec3 up;',\n\n\t\t'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );',\n\n\t\t// constants for atmospheric scattering\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;',\n\n\t\t'const float n = 1.0003;', // refractive index of air\n\t\t'const float N = 2.545E25;', // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n\n\t\t// optical length at zenith for molecules\n\t\t'const float rayleighZenithLength = 8.4E3;',\n\t\t'const float mieZenithLength = 1.25E3;',\n\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\t'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\n\n\t\t// 3.0 / ( 16.0 * pi )\n\t\t'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;',\n\t\t// 1.0 / ( 4.0 * pi )\n\t\t'const float ONE_OVER_FOURPI = 0.07957747154594767;',\n\n\t\t'float rayleighPhase( float cosTheta ) {',\n\t\t'\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );',\n\t\t'}',\n\n\t\t'float hgPhase( float cosTheta, float g ) {',\n\t\t'\tfloat g2 = pow( g, 2.0 );',\n\t\t'\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );',\n\t\t'\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );',\n\t\t'}',\n\n\t\t// Filmic ToneMapping http://filmicgames.com/archives/75\n\t\t'const float A = 0.15;',\n\t\t'const float B = 0.50;',\n\t\t'const float C = 0.10;',\n\t\t'const float D = 0.20;',\n\t\t'const float E = 0.02;',\n\t\t'const float F = 0.30;',\n\n\t\t'const float whiteScale = 1.0748724675633854;', // 1.0 / Uncharted2Tonemap(1000.0)\n\n\t\t'vec3 Uncharted2Tonemap( vec3 x ) {',\n\t\t'\treturn ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;',\n\t\t'}',\n\n\n\t\t'void main() {',\n\n\t\t'\tvec3 direction = normalize( vWorldPosition - cameraPos );',\n\n\t\t// optical length\n\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t'\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );',\n\t\t'\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );',\n\t\t'\tfloat sR = rayleighZenithLength * inverse;',\n\t\t'\tfloat sM = mieZenithLength * inverse;',\n\n\t\t// combined extinction factor\n\t\t'\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );',\n\n\t\t// in scattering\n\t\t'\tfloat cosTheta = dot( direction, vSunDirection );',\n\n\t\t'\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );',\n\t\t'\tvec3 betaRTheta = vBetaR * rPhase;',\n\n\t\t'\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );',\n\t\t'\tvec3 betaMTheta = vBetaM * mPhase;',\n\n\t\t'\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );',\n\t\t'\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );',\n\n\t\t// nightsky\n\t\t'\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]',\n\t\t'\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]',\n\t\t'\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );',\n\t\t'\tvec3 L0 = vec3( 0.1 ) * Fex;',\n\n\t\t// composition + solar disc\n\t\t'\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );',\n\t\t'\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;',\n\n\t\t'\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );',\n\n\t\t'\tvec3 curr = Uncharted2Tonemap( ( log2( 2.0 / pow( luminance, 4.0 ) ) ) * texColor );',\n\t\t'\tvec3 color = curr * whiteScale;',\n\n\t\t'\tvec3 retColor = pow( color, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );',\n\n\t\t'\tgl_FragColor = vec4( retColor, 1.0 );',\n\n\t\t'}'\n\t].join( '\\n' )\n\n};\n\nexport { Sky };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}