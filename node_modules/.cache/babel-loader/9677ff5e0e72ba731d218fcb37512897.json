{"ast":null,"code":"function mergeRefs(refs) {\n  return function (value) {\n    refs.forEach(function (ref) {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\nexport default mergeRefs;","map":{"version":3,"sources":["../src/index.tsx"],"names":["mergeRefs","refs","value","forEach","ref","current"],"mappings":"SAEwBA,SAAAA,CACtBC,IAAAA,EAAAA;EAEA,OAAO,UAACC,KAAD,EAAA;IACLD,IAAI,CAACE,OAALF,CAAa,UAACG,GAAD,EAAA;MACX,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;QAC7BA,GAAG,CAACF,KAAD,CAAHE;MACD,CAFD,MAEO,IAAIA,GAAG,IAAI,IAAX,EAAiB;QACrBA,GAAwC,CAACC,OAAzCD,GAAmDF,KAAnDE;MACF;IACF,CANDH,CAAAA;EAOD,CARD;AASD","sourcesContent":["import * as React from \"react\";\n\nexport default function mergeRefs<T = any>(\n  refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        (ref as React.MutableRefObject<T | null>).current = value;\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}